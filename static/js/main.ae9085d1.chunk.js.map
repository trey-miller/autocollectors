{"version":3,"sources":["Game.module.scss","game/State.ts","game/Actions.ts","game/CanvasGrid.tsx","game/DomGrid.tsx","Game.tsx","game/hooks/useStep.ts","App.tsx","serviceWorker.ts","game/util.ts","game/reducers/collect.ts","game/reducers/search.ts","index.tsx","game/reducers/index.ts"],"names":["module","exports","GridType","useGameSelector","useSelector","createState","width","height","blocks","range","map","y","x","stuff","reachable","collectibleBlocks","speed","gridType","Canvas","createDefaultState","collect","pos","dispatch","getState","type","payload","collectedBlock","CanvasGrid","useDispatch","store","useStore","ref","useRef","wsize","useWindowSize","useState","canvasSize","setCanvasSize","useEffect","current","dpi","window","devicePixelRatio","offsetWidth","offsetHeight","useRafLoop","ctx","getContext","clearRect","fillStyle","fillRect","blockHeight","length","i","blockWidth","j","block","stuffRatio","drawWidth","drawHeight","drawX","drawY","lineWidth","strokeRect","onClick","useCallback","e","rect","getBoundingClientRect","mouseX","clientX","left","mouseY","clientY","top","Math","floor","className","styles","gridCanvasContainer","gridCanvas","DomGrid","blockRowCount","state","yRange","useMemo","grid","BlockRow","key","rowSize","xRange","row","Block","size","blockColor","style","Game","s","root","GameLoop","controls","Resetter","SpeedSelector","GridTypeSelector","StuffDisplay","SuccessDisplay","update","stepMs","lastTimeRef","accumRef","maxAccum","time","delta","useStep","randomBlock","random","defaultGridSize","resetSize","setResetSize","disabled","setDisabled","onChange","value","target","n","parseInt","isNaN","onResetClick","min","defaultValue","String","required","pattern","valueAsNumber","setSpeed","setGridType","name","checked","Dom","success","App","Boolean","location","hostname","match","set2dValue","values","newValue","ii","jj","collectReducer","oldBlock","newBlock","isDepleted","filter","b","searchBlock","searchReducer","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunkMiddleware","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iLACAA,EAAOC,QAAU,CAAC,KAAO,mBAAmB,SAAW,uBAAuB,KAAO,mBAAmB,IAAM,kBAAkB,MAAQ,oBAAoB,WAAa,yBAAyB,UAAY,wBAAwB,QAAU,sBAAsB,oBAAsB,kCAAkC,WAAa,2B,2CCgB/TC,E,2FAdCC,EAAoDC,K,SAcrDF,K,gBAAAA,E,WAAAA,M,KAeL,IAAMG,EAAc,SAACC,EAAeC,GASvC,MAAO,CACHC,OATWC,gBAAMF,GAChBG,KAAI,SAAAC,GAAC,OAAIF,gBAAMH,GACXI,KAAI,SAAAE,GAAC,MAAK,CACPA,IACAD,IACAE,MAAO,GACPC,UAAiB,IAANH,GAAiB,IAANC,SAI9BG,kBAAmB,CAAC,CAAEH,EAAG,EAAGD,EAAG,IAC/BE,MAAO,EACPG,MAAO,EACPC,SAAUf,EAASgB,SAKdC,EAAqB,kBAAMd,EAD3B,Q,QCzCN,IAyBMe,EAAU,SAACC,GAAD,OAAqC,SAACC,EAAUC,GACnED,EAAS,CAAEE,KA1BQ,UA0BOC,QAASJ,IACnC,IAAMK,EAAiBH,IAAWf,OAAOa,EAAIV,GAAGU,EAAIT,GACvB,IAAzBc,EAAeb,OACfS,EAAS,CAAEE,KA1BG,SA0BWC,QAASC,M,QC9BnC,SAASC,IACZ,IAAML,EAAWM,cACXC,EAAQC,cACRC,EAAMC,iBAA0B,MAEhCC,EAAQC,cALwB,EAMFC,mBAASF,GANP,mBAM/BG,EAN+B,KAMnBC,EANmB,KAQtCC,qBAAU,WACN,GAAmB,MAAfP,EAAIQ,QAAiB,CACrB,IAAMC,EAAMC,OAAOC,iBACnBL,EAAc,CACV/B,MAAOyB,EAAIQ,QAAQI,YAAcH,EACjCjC,OAAQwB,EAAIQ,QAAQK,aAAeJ,OAG5C,CAACP,EAAM3B,MAAO2B,EAAM1B,SAEvBsC,aAAW,WACP,GAAmB,MAAfd,EAAIQ,QAAR,CAGA,IAAMO,EAAMf,EAAIQ,QAAQQ,WAAW,MACnC,GAAW,MAAPD,EAAJ,CAIAA,EAAIE,UAAU,EAAG,EAAGjB,EAAIQ,QAAQjC,MAAOyB,EAAIQ,QAAQhC,QACnDuC,EAAIG,UAAY,QAChBH,EAAII,SAAS,EAAG,EAAGnB,EAAIQ,QAAQjC,MAAOyB,EAAIQ,QAAQhC,QAKlD,IAHA,IAAMC,EAASqB,EAAMN,WAAWf,OAC1B2C,EAAcpB,EAAIQ,QAAQhC,OAASC,EAAO4C,OAEvCC,EAAI,EAAGA,EAAI7C,EAAO4C,OAAQC,IAG/B,IAFA,IAAMC,EAAavB,EAAIQ,QAAQjC,MAAQE,EAAO6C,GAAGD,OAExCG,EAAI,EAAGA,EAAI/C,EAAO6C,GAAGD,OAAQG,IAAK,CACvC,IAAMC,EAAQhD,EAAO+C,GAAGF,GAClB1C,EAAI4C,EAAID,EACR1C,EAAIyC,EAAIF,EAEd,GAAIK,EAAM3C,MAAQ,EAAG,CACjB,IAAM4C,EAAaD,EAAM3C,MAAQ,GAC3B6C,EAAYD,EAAaH,EACzBK,EAAaF,EAAaN,EAC1BS,EAAQhD,GAAK0C,EAAaI,GAAa,EACvCG,EAAQlD,GAAKwC,EAAcQ,GAAc,EAE/Cb,EAAIG,UAAYO,EAAM1C,UAAY,OAAS,OAC3CgC,EAAII,SAASU,EAAOC,EAAOH,EAAWC,GAG1Cb,EAAIG,UAAY,QAChBH,EAAIgB,UAAY,EAChBhB,EAAIiB,WAAWnD,EAAGD,EAAG2C,EAAYH,SAK7C,IAAMa,EAAUC,uBAAY,SAACC,GAA4C,IAAD,EAC9DC,EAAI,UAAGpC,EAAIQ,eAAP,aAAG,EAAa6B,wBAC1B,GAAY,MAARD,EAAJ,CAGA,IAAME,EAASH,EAAEI,QAAUH,EAAKI,KAC1BC,EAASN,EAAEO,QAAUN,EAAKO,IAC1BlE,EAASqB,EAAMN,WAAWf,OAC1BG,EAAIgE,KAAKC,MAAMJ,EAAShE,EAAO4C,OAASe,EAAK5D,QACnD,KAAII,GAAKH,EAAO4C,QAAhB,CAGA,IAAMxC,EAAI+D,KAAKC,MAAMP,EAAS7D,EAAOG,GAAGyC,OAASe,EAAK5D,QAClDK,GAAKJ,EAAOG,GAAGyC,QAGnB9B,EAASF,EAAQ,CAAET,IAAGC,WACvB,CAACU,EAAUO,IAEd,OACI,yBAAKgD,UAAWC,IAAOC,qBACnB,4BACIF,UAAWC,IAAOE,WAClB1E,MAAO8B,EAAW9B,MAClBC,OAAQ6B,EAAW7B,OACnBwB,IAAKA,EACLiC,QAASA,KCvFlB,SAASiB,IACZ,IAAMC,EAAgB/E,GAAgB,SAAAgF,GAAK,OAAIA,EAAM3E,OAAO4C,UACtDgC,EAASC,mBAAQ,kBAAM5E,gBAAMyE,KAAgB,CAACA,IACpD,OACI,yBAAKL,UAAWC,IAAOQ,MAClBF,EAAO1E,KAAI,SAAAC,GAAC,OACT,kBAAC4E,EAAD,CAAUC,IAAK7E,EAAGA,EAAGA,QAMrC,SAAS4E,EAAT,GAAsD,IAAlC5E,EAAiC,EAAjCA,EACV8E,EAAUtF,GAAgB,SAAAgF,GAAK,OAAIA,EAAM3E,OAAOG,GAAGyC,UACnDsC,EAASL,mBAAQ,kBAAM5E,gBAAMgF,KAAU,CAACA,IAC9C,OACI,yBAAKZ,UAAWC,IAAOa,KAClBD,EAAOhF,KAAI,SAAAE,GAAC,OACT,kBAACgF,EAAD,CAAOJ,IAAK5E,EAAGA,EAAGA,EAAGD,EAAGA,QAMxC,SAASiF,EAAT,GAAkD,IAAjChF,EAAgC,EAAhCA,EAAGD,EAA6B,EAA7BA,EACV6C,EAAQrD,GAAgB,SAAAgF,GAAK,OAAIA,EAAM3E,OAAOG,GAAGC,MACjDU,EAAWM,cACXoC,EAAUC,uBAAY,kBAAMT,EAAM3C,MAAQ,GAAKS,EAASF,EAAQoC,MAAS,CAAClC,EAAUkC,IACpFqC,EAAOR,mBAAQ,kBAAMV,KAAKC,MAAoB,IAAdpB,EAAM3C,MAAc,IAAM,MAAK,CAAC2C,EAAM3C,QAE5E,OACI,yBAAKgE,UAAS,UAAKC,IAAOtB,MAAZ,YAAqBA,EAAM1C,UAAYgE,IAAOhE,UAAY,IAAMkD,QAASA,GACnF,yBACIa,UAAWC,IAAOgB,WAClBC,MAAO,CAAExF,OAAQsF,EAAMvF,MAAOuF,MC/BvC,SAASG,IACZ,IAAM/E,EAAWd,GAAgB,SAAA8F,GAAC,OAAIA,EAAEhF,YACxC,OACI,yBAAK4D,UAAWC,IAAOoB,MACnB,kBAACC,EAAD,MACA,yBAAKtB,UAAWC,IAAOsB,UACnB,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,OAEJ,kBAACC,EAAD,MACA,kBAACC,EAAD,MACCxF,IAAaf,EAASgB,OACjB,kBAACS,EAAD,MACA,kBAACsD,EAAD,OAMlB,SAASkB,IACL,IAAM7E,EAAWM,cACXZ,EAAQb,GAAgB,SAAAgF,GAAK,OAAIA,EAAMnE,SAG7C,OC9BG,SAAiB0F,GAAmE,IAAlCC,EAAiC,uDAAf,EAAI,GACrEC,EAAc5E,iBAAO,GACrB6E,EAAW7E,iBAAO,GAClB8E,EAAWzB,mBAAQ,kBAAe,GAATsB,IAAa,CAACA,IAE7C9D,aAAW,SAAAkE,GACqB,IAAxBH,EAAYrE,UACZqE,EAAYrE,QAAUwE,GAE1B,IAAMC,EAAQD,EAAOH,EAAYrE,QAMjC,IALAqE,EAAYrE,QAAUwE,EACtBF,EAAStE,SAAWyE,EAChBH,EAAStE,QAAUuE,IACnBD,EAAStE,QAAUuE,GAEhBD,EAAStE,SAAWoE,GACvBD,EAAOC,GACPE,EAAStE,SAAWoE,KDY5BM,EAAQ,kBAAM3F,GHQkC,SAACA,EAAUC,GAC3D,IAAMR,EAAoBQ,IAAWR,kBACrC,GAAIA,EAAkBqC,OAAS,EAAG,CAC9B,IAAM8D,EAAcnG,EAAkB4D,KAAKC,MAAMD,KAAKwC,SAAWpG,EAAkBqC,SACnF9B,EAASF,EAAQ8F,UGbN7B,mBAAQ,kBAAM,IAAOrE,IAAO,CAACA,KAErC,KAGX,SAASqF,IACL,IAAMe,EAAkBjH,GAAgB,SAAAgF,GAAK,OAAIA,EAAM3E,OAAO4C,UAAQ,kBAAM,KACtE9B,EAAWM,cAFY,EAGKO,mBAASiF,GAHd,mBAGtBC,EAHsB,KAGXC,EAHW,OAIGnF,oBAAS,GAJZ,mBAItBoF,EAJsB,KAIZC,EAJY,KAKvBC,EAAWxD,uBAAY,YAAiE,IAApDyD,EAAmD,EAA7DC,OAAUD,MAChCE,EAAIC,SAASH,EAAO,IACtBE,EAAI,GACJN,EAAaM,GAEjBJ,EAAYM,MAAMF,IAAMA,EAAI,KAC7B,IACGG,EAAe9D,uBACjB,kBAAOsD,GAAYjG,EHDkC,CAAEE,KAnCrC,aAmCuDC,QAAS,CAAEoE,KGC9CwB,OACtC,CAAC/F,EAAUiG,EAAUF,IACzB,OACI,2BACI,sCACA,2BAAO7F,KAAK,SAASwG,IAAK,EAAGC,aAAcC,OAAOb,GAAYI,SAAUA,EAAUU,UAAQ,EAACC,QAAQ,gBACnG,4BAAQb,SAAUA,EAAUvD,QAAS+D,GAArC,UAKZ,SAASzB,IACL,IAAMhF,EAAWM,cACXZ,EAAQb,GAAgB,SAAAgF,GAAK,OAAIA,EAAMnE,SACvCyG,EAAWxD,uBAAY,YAAyE,IAA5DoE,EAA2D,EAArEV,OAAUU,cAClCA,EAAgB,GAChB/G,EHfY,SAACN,GAAD,MAAoC,CAAEQ,KAlCrC,YAkCsDC,QAAST,GGenEsH,CAASD,MAEvB,CAAC/G,IACJ,OACI,2BACI,uCACA,2BAAOE,KAAK,SAASwG,IAAK,EAAGC,aAAcC,OAAOlH,GAAQyG,SAAUA,EAAUU,UAAQ,EAACC,QAAQ,gBAC/F,gDAKZ,SAAS7B,IACL,IAAMtF,EAAWd,GAAgB,SAAA8F,GAAC,OAAIA,EAAEhF,YAClCK,EAAWM,cAEX6F,EAAWxD,uBAAY,SAACC,GAC1B5C,EH9BmB,SAACL,GAAD,MAA4C,CAAEO,KAjC5C,gBAiCiEC,QAASR,GG8BtFsH,CAAYrE,EAAEyD,OAAOD,UAC/B,CAACpG,IAEJ,OACI,2BACI,kDACA,+BACI,2BACIE,KAAK,QACLgH,KAAK,YACLd,MAAOxH,EAASgB,OAChBuH,QAASxH,IAAaf,EAASgB,OAC/BuG,SAAUA,IANlB,UAUA,+BACI,2BACIjG,KAAK,QACLgH,KAAK,YACLd,MAAOxH,EAASwI,IAChBD,QAASxH,IAAaf,EAASwI,IAC/BjB,SAAUA,IANlB,QAcZ,SAASjB,IACL,IAAM3F,EAAQV,GAAgB,SAAAgF,GAAK,OAAIA,EAAMtE,SAC7C,OACI,+CAAoB,gCAASA,IAIrC,SAAS4F,IAEL,OADetG,GAAgB,SAAAgF,GAAK,OAAuC,IAAnCA,EAAMpE,kBAAkBqC,UAGxD,uBAAGyB,UAAWC,IAAO6D,SAArB,wBAGD,KEjHIC,MAXf,WACE,OACE,yBAAK/D,UAAU,OACb,4BAAQA,UAAU,cAAlB,sCAGA,kBAACmB,EAAD,QCEc6C,QACW,cAA7BpG,OAAOqG,SAASC,UAEe,UAA7BtG,OAAOqG,SAASC,UAEhBtG,OAAOqG,SAASC,SAASC,MACvB,2D,0BCXOC,EAAa,SAASC,EAAoB7F,EAAWE,EAAW4F,GAAnD,OACtBD,EAAOxI,KAAI,SAACiF,EAAKyD,GAAN,OAAaA,IAAO/F,EACzBsC,EAAIjF,KAAI,SAACgH,EAAO2B,GAAR,OAAeA,IAAO9F,EAAI4F,EAAWzB,KAC7C/B,MCPH,SAAS2D,EAAenE,EAAxB,GAA6E,IAAhCvE,EAA+B,EAA/BA,EAAGD,EAA4B,EAA5BA,EAC7C4I,EAAWpE,EAAM3E,OAAOG,GAAGC,GACjC,GAAI2I,EAAS1I,OAAS,EAClB,OAAOsE,EAGX,IAAMqE,EAAQ,2BACPD,GADO,IAEV1I,MAAO0I,EAAS1I,MAAQ,EACxBC,WAAW,IAET2I,EAAaD,EAAS3I,OAAS,EACrC,OAAO,2BACAsE,GADP,IAEI3E,OAAQyI,EAAW9D,EAAM3E,OAAQG,EAAGC,EAAG4I,GACvCzI,kBAAmB0I,EACbtE,EAAMpE,kBAAkB2I,QAAO,SAAAC,GAAC,OAAIA,EAAE/I,IAAMA,GAAK+I,EAAEhJ,IAAMA,KACxD4I,EAASzI,UAENqE,EAAMpE,kBAFV,sBACQoE,EAAMpE,mBADd,CACiC,CAAEH,IAAGD,OAE5CE,MAAOsE,EAAMtE,MAAQ,ICnB7B,SAAS+I,EAAYzE,EAAmBxE,EAAWC,GAC/C,GAAID,EAAI,GAAKA,GAAKwE,EAAM3E,OAAO4C,QAAUxC,EAAI,GAAKA,GAAKuE,EAAM3E,OAAO4C,OAChE,OAAO+B,EAEX,IAAM3B,EAAQ2B,EAAM3E,OAAOG,GAAGC,GAC9B,OAAI4C,EAAM1C,UACCqE,EAEJ,2BACAA,GADP,IAEI3E,OAAQyI,EAAW9D,EAAM3E,OAAQG,EAAGC,EAAlB,YAAC,eAAyB4C,GAA1B,IAAiC1C,WAAW,KAC9DC,kBAAkB,GAAD,mBAAMoE,EAAMpE,mBAAZ,CAA+B,CAAEH,IAAGD,SAItD,SAASkJ,EAAc1E,EAAvB,GAA4E,IAAhCvE,EAA+B,EAA/BA,EAAGD,EAA4B,EAA5BA,EAElD,OADcwE,EAAM3E,OAAOG,GAAGC,GACpBC,MAAQ,EACPsE,GAEXA,EAAQyE,EAAYzE,EAAOxE,EAAI,EAAGC,GAClCuE,EAAQyE,EAAYzE,EAAOxE,EAAI,EAAGC,GAClCuE,EAAQyE,EAAYzE,EAAOxE,EAAGC,EAAI,GAClCuE,EAAQyE,EAAYzE,EAAOxE,EAAGC,EAAI,ICftC,IAOMkJ,GANc,kBAAXrH,QACLA,OAAOsH,qCACPtH,OAAOsH,qCAAqC,IAEvCC,KAGPC,YACEC,MAKErI,EAAQsI,aCrBP,WAAkG,IAA7EhF,EAA4E,uDAAxDhE,IAAsBiJ,EAAkC,uCACpG,IAAKA,EACD,OAAOjF,EAGX,OAAQiF,EAAO5I,MACX,IXFe,UWGX,OAAO8H,EAAenE,EAAOiF,EAAO3I,SACxC,IXDc,SWEV,OAAOoI,EAAc1E,EAAOiF,EAAO3I,SACvC,IXAkB,aWAlB,IACYoE,EAASuE,EAAO3I,QAAhBoE,KACR,OAAO,2BACAxF,EAAYwF,EAAMA,IADzB,IAEI7E,MAAOmE,EAAMnE,MACbC,SAAUkE,EAAMlE,WAExB,IXJiB,YWKb,OAAO,2BACAkE,GADP,IAEInE,MAAOoJ,EAAO3I,UAEtB,IXNqB,gBWOjB,OAAO,2BACA0D,GADP,IAEIlE,SAAUmJ,EAAO3I,UAEzB,QACI,OAAO0D,KDLjB2E,GAIFO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAU1I,MAAOA,GACf,kBAAC,EAAD,QAGJ2I,SAASC,eAAe,SJqGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ae9085d1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Game_root__2VenW\",\"controls\":\"Game_controls__2cTjf\",\"grid\":\"Game_grid__zZH6q\",\"row\":\"Game_row__1uA0V\",\"block\":\"Game_block__3C-M9\",\"blockColor\":\"Game_blockColor__2SBPn\",\"reachable\":\"Game_reachable__3vy7J\",\"success\":\"Game_success__2fBGb\",\"gridCanvasContainer\":\"Game_gridCanvasContainer__1Vk0G\",\"gridCanvas\":\"Game_gridCanvas__2zrqb\"};","import { range } from 'lodash';\r\nimport { TypedUseSelectorHook, useSelector } from 'react-redux';\r\n\r\nexport const useGameSelector: TypedUseSelectorHook<IGameState> = useSelector;\r\n\r\nexport interface IPosition {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface IBlock extends IPosition {\r\n    stuff: number;\r\n    reachable: boolean;\r\n}\r\n\r\nexport type IBlocks = IBlock[][];\r\n\r\nexport enum GridType {\r\n    Canvas = 'Canvas',\r\n    Dom = 'Dom',\r\n}\r\n\r\nexport interface IGameState {\r\n    /** Access y first, so block at (2,3) is blocks[3][2] */\r\n    blocks: IBlock[][];\r\n    collectibleBlocks: IPosition[];\r\n    stuff: number;\r\n    speed: number;\r\n    gridType: GridType;\r\n}\r\n\r\n\r\nexport const createState = (width: number, height: number): IGameState => {\r\n    const blocks = range(height)\r\n        .map(y => range(width)\r\n            .map(x => ({\r\n                x,\r\n                y,\r\n                stuff: 10,\r\n                reachable: y === 0 && x === 0,\r\n            })));\r\n    return {\r\n        blocks,\r\n        collectibleBlocks: [{ x: 0, y: 0 }],\r\n        stuff: 0,\r\n        speed: 1,\r\n        gridType: GridType.Canvas,\r\n    };\r\n};\r\n\r\nconst SIZE = 20;\r\nexport const createDefaultState = () => createState(SIZE, SIZE);\r\n","import { Action } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { GridType, IGameState, IPosition } from './State';\r\n\r\n\r\nexport type GameAction<TType = string, TPayload = undefined> = TPayload extends undefined\r\n    ? Action<TType>\r\n    : { type: TType; payload: TPayload; };\r\n\r\nexport const COLLECT = 'COLLECT';\r\nexport type CollectAction = GameAction<typeof COLLECT, IPosition>;\r\n\r\nexport const SEARCH = 'SEARCH';\r\nexport type SearchAction = GameAction<typeof SEARCH, IPosition>;\r\n\r\nexport const RESET_GAME = 'RESET_GAME';\r\nexport type ResetGameAction = GameAction<typeof RESET_GAME, { size: number }>;\r\n\r\nexport const SET_SPEED = 'SET_SPEED';\r\nexport type SetSpeedAction = GameAction<typeof SET_SPEED, number>;\r\n\r\nexport const SET_GRID_TYPE = 'SET_GRID_TYPE';\r\nexport type SetGridTypeAction = GameAction<typeof SET_GRID_TYPE, GridType>;\r\n\r\nexport type ActionUnion = (\r\n    | CollectAction\r\n    | SearchAction\r\n    | ResetGameAction\r\n    | SetSpeedAction\r\n    | SetGridTypeAction\r\n);\r\n\r\nexport type GameThunkAction = ThunkAction<unknown, IGameState, unknown, ActionUnion>;\r\n\r\nexport const collect = (pos: IPosition): GameThunkAction => (dispatch, getState) => {\r\n    dispatch({ type: COLLECT, payload: pos });\r\n    const collectedBlock = getState().blocks[pos.y][pos.x];\r\n    if (collectedBlock.stuff === 0) {\r\n        dispatch({ type: SEARCH, payload: collectedBlock });\r\n    }\r\n};\r\n\r\nexport const collectRandom = (): GameThunkAction => (dispatch, getState) => {\r\n    const collectibleBlocks = getState().collectibleBlocks;\r\n    if (collectibleBlocks.length > 0) {\r\n        const randomBlock = collectibleBlocks[Math.floor(Math.random() * collectibleBlocks.length)];\r\n        dispatch(collect(randomBlock));\r\n    }\r\n};\r\n\r\nexport const resetGame = (size: number): ResetGameAction => ({ type: RESET_GAME, payload: { size } });\r\n\r\nexport const setSpeed = (speed: number): SetSpeedAction => ({ type: SET_SPEED, payload: speed });\r\n\r\nexport const setGridType = (gridType: GridType): SetGridTypeAction => ({ type: SET_GRID_TYPE, payload: gridType });","import React, { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useStore } from 'react-redux';\r\nimport { useRafLoop, useWindowSize } from 'react-use';\r\nimport styles from '../Game.module.scss';\r\nimport { collect } from './Actions';\r\nimport { IGameState } from './State';\r\n\r\n\r\nexport function CanvasGrid(): JSX.Element {\r\n    const dispatch = useDispatch();\r\n    const store = useStore<IGameState>();\r\n    const ref = useRef<HTMLCanvasElement>(null);\r\n\r\n    const wsize = useWindowSize();\r\n    const [canvasSize, setCanvasSize] = useState(wsize);\r\n\r\n    useEffect(() => {\r\n        if (ref.current != null) {\r\n            const dpi = window.devicePixelRatio;\r\n            setCanvasSize({\r\n                width: ref.current.offsetWidth * dpi,\r\n                height: ref.current.offsetHeight * dpi,\r\n            });\r\n        }\r\n    }, [wsize.width, wsize.height]);\r\n\r\n    useRafLoop(() => {\r\n        if (ref.current == null) {\r\n            return;\r\n        }\r\n        const ctx = ref.current.getContext('2d');\r\n        if (ctx == null) {\r\n            return;\r\n        }\r\n\r\n        ctx.clearRect(0, 0, ref.current.width, ref.current.height);\r\n        ctx.fillStyle = 'white';\r\n        ctx.fillRect(0, 0, ref.current.width, ref.current.height);\r\n\r\n        const blocks = store.getState().blocks;\r\n        const blockHeight = ref.current.height / blocks.length;\r\n\r\n        for (let i = 0; i < blocks.length; i++) {\r\n            const blockWidth = ref.current.width / blocks[i].length;\r\n\r\n            for (let j = 0; j < blocks[i].length; j++) {\r\n                const block = blocks[j][i];\r\n                const y = j * blockWidth;\r\n                const x = i * blockHeight;\r\n\r\n                if (block.stuff > 0) {\r\n                    const stuffRatio = block.stuff / 10;\r\n                    const drawWidth = stuffRatio * blockWidth;\r\n                    const drawHeight = stuffRatio * blockHeight;\r\n                    const drawX = x + (blockWidth - drawWidth) / 2;\r\n                    const drawY = y + (blockHeight - drawHeight) / 2;\r\n\r\n                    ctx.fillStyle = block.reachable ? '#421' : '#222';\r\n                    ctx.fillRect(drawX, drawY, drawWidth, drawHeight);\r\n                }\r\n\r\n                ctx.fillStyle = 'black';\r\n                ctx.lineWidth = 1;\r\n                ctx.strokeRect(x, y, blockWidth, blockHeight);\r\n            }\r\n        }\r\n    });\r\n\r\n    const onClick = useCallback((e: React.MouseEvent<HTMLCanvasElement>) => {\r\n        const rect = ref.current?.getBoundingClientRect();\r\n        if (rect == null) {\r\n            return;\r\n        }\r\n        const mouseX = e.clientX - rect.left;\r\n        const mouseY = e.clientY - rect.top;\r\n        const blocks = store.getState().blocks;\r\n        const y = Math.floor(mouseY * blocks.length / rect.height);\r\n        if (y >= blocks.length) {\r\n            return;\r\n        }\r\n        const x = Math.floor(mouseX * blocks[y].length / rect.height);\r\n        if (x >= blocks[y].length) {\r\n            return;\r\n        }\r\n        dispatch(collect({ y, x }));\r\n    }, [dispatch, store]);\r\n\r\n    return (\r\n        <div className={styles.gridCanvasContainer}>\r\n            <canvas\r\n                className={styles.gridCanvas}\r\n                width={canvasSize.width}\r\n                height={canvasSize.height}\r\n                ref={ref}\r\n                onClick={onClick}\r\n            />\r\n        </div>\r\n    );\r\n}","import { range } from 'lodash';\r\nimport React, { useCallback, useMemo } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styles from '../Game.module.scss';\r\nimport { collect } from './Actions';\r\nimport { IPosition, useGameSelector } from './State';\r\n\r\nexport function DomGrid(): JSX.Element {\r\n    const blockRowCount = useGameSelector(state => state.blocks.length);\r\n    const yRange = useMemo(() => range(blockRowCount), [blockRowCount]);\r\n    return (\r\n        <div className={styles.grid}>\r\n            {yRange.map(y => (\r\n                <BlockRow key={y} y={y} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction BlockRow({ y }: { y: number }): JSX.Element {\r\n    const rowSize = useGameSelector(state => state.blocks[y].length);\r\n    const xRange = useMemo(() => range(rowSize), [rowSize]);\r\n    return (\r\n        <div className={styles.row}>\r\n            {xRange.map(x => (\r\n                <Block key={x} x={x} y={y} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Block({ x, y }: IPosition): JSX.Element {\r\n    const block = useGameSelector(state => state.blocks[y][x]);\r\n    const dispatch = useDispatch();\r\n    const onClick = useCallback(() => block.stuff > 0 && dispatch(collect(block)), [dispatch, block]);\r\n    const size = useMemo(() => Math.floor(block.stuff * 100 / 10) + '%', [block.stuff]);\r\n\r\n    return (\r\n        <div className={`${styles.block} ${block.reachable ? styles.reachable : ''}`} onClick={onClick}>\r\n            <div\r\n                className={styles.blockColor}\r\n                style={{ height: size, width: size }}\r\n            />\r\n        </div>\r\n    );\r\n}","import React, { useCallback, useMemo, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styles from './Game.module.scss';\r\nimport { GridType, useGameSelector } from './game/State';\r\nimport { useStep } from './game/hooks/useStep';\r\nimport { collectRandom, resetGame, setGridType, setSpeed } from './game/Actions';\r\nimport { CanvasGrid } from './game/CanvasGrid';\r\nimport { DomGrid } from './game/DomGrid';\r\n\r\n\r\nexport function Game(): JSX.Element {\r\n    const gridType = useGameSelector(s => s.gridType);\r\n    return (\r\n        <div className={styles.root}>\r\n            <GameLoop />\r\n            <div className={styles.controls}>\r\n                <Resetter />\r\n                <SpeedSelector />\r\n                <GridTypeSelector />\r\n            </div>\r\n            <StuffDisplay />\r\n            <SuccessDisplay />\r\n            {gridType === GridType.Canvas\r\n                ? <CanvasGrid />\r\n                : <DomGrid />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction GameLoop(): null {\r\n    const dispatch = useDispatch();\r\n    const speed = useGameSelector(state => state.speed);\r\n    const stepMs = useMemo(() => 1000 / speed, [speed]);\r\n    useStep(() => dispatch(collectRandom()), stepMs);\r\n    return null;\r\n}\r\n\r\nfunction Resetter(): JSX.Element {\r\n    const defaultGridSize = useGameSelector(state => state.blocks.length, () => false);\r\n    const dispatch = useDispatch();\r\n    const [resetSize, setResetSize] = useState(defaultGridSize);\r\n    const [disabled, setDisabled] = useState(false);\r\n    const onChange = useCallback(({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n        const n = parseInt(value, 10);\r\n        if (n > 0) {\r\n            setResetSize(n);\r\n        }\r\n        setDisabled(isNaN(n) || n < 1);\r\n    }, []);\r\n    const onResetClick = useCallback(\r\n        () => !disabled && dispatch(resetGame(resetSize)),\r\n        [dispatch, disabled, resetSize]);\r\n    return (\r\n        <p>\r\n            <span>Size</span>\r\n            <input type=\"number\" min={1} defaultValue={String(resetSize)} onChange={onChange} required pattern=\"[1-9][0-9]*\" />\r\n            <button disabled={disabled} onClick={onResetClick}>Reset</button>\r\n        </p>\r\n    );\r\n}\r\n\r\nfunction SpeedSelector(): JSX.Element {\r\n    const dispatch = useDispatch();\r\n    const speed = useGameSelector(state => state.speed);\r\n    const onChange = useCallback(({ target: { valueAsNumber } }: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (valueAsNumber > 0) {\r\n            dispatch(setSpeed(valueAsNumber));\r\n        }\r\n    }, [dispatch]);\r\n    return (\r\n        <p>\r\n            <span>Speed</span>\r\n            <input type=\"number\" min={1} defaultValue={String(speed)} onChange={onChange} required pattern=\"[1-9][0-9]*\" />\r\n            <span>&nbsp;ticks/sec</span>\r\n        </p>\r\n    );\r\n}\r\n\r\nfunction GridTypeSelector(): JSX.Element {\r\n    const gridType = useGameSelector(s => s.gridType);\r\n    const dispatch = useDispatch();\r\n\r\n    const onChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setGridType(e.target.value as GridType));\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <p>\r\n            <span>Grid Render Type</span>\r\n            <label>\r\n                <input\r\n                    type=\"radio\"\r\n                    name=\"grid-type\"\r\n                    value={GridType.Canvas}\r\n                    checked={gridType === GridType.Canvas}\r\n                    onChange={onChange}\r\n                />\r\n                Canvas\r\n            </label>\r\n            <label>\r\n                <input\r\n                    type=\"radio\"\r\n                    name=\"grid-type\"\r\n                    value={GridType.Dom}\r\n                    checked={gridType === GridType.Dom}\r\n                    onChange={onChange}\r\n                />\r\n                Dom\r\n            </label>\r\n        </p>\r\n    );\r\n}\r\n\r\nfunction StuffDisplay(): JSX.Element {\r\n    const stuff = useGameSelector(state => state.stuff);\r\n    return (\r\n        <p>Collected stuff: <strong>{stuff}</strong></p>\r\n    );\r\n}\r\n\r\nfunction SuccessDisplay(): JSX.Element | null {\r\n    const isDone = useGameSelector(state => state.collectibleBlocks.length === 0);\r\n    if (isDone) {\r\n        return (\r\n            <p className={styles.success}>All stuff collected!</p>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n","import { useMemo, useRef } from 'react';\r\nimport { useRafLoop } from 'react-use';\r\n\r\n\r\n/** updates as close to every stepMs as possible, while hopefully preventing drift over time. */\r\nexport function useStep(update: (delta: number) => void, stepMs: number = (1 / 30)): void {\r\n    const lastTimeRef = useRef(0);\r\n    const accumRef = useRef(0);\r\n    const maxAccum = useMemo(() => stepMs * 10, [stepMs]);\r\n\r\n    useRafLoop(time => {\r\n        if (lastTimeRef.current === 0) {\r\n            lastTimeRef.current = time;\r\n        }\r\n        const delta = time - lastTimeRef.current;\r\n        lastTimeRef.current = time;\r\n        accumRef.current += delta;\r\n        if (accumRef.current > maxAccum) {\r\n            accumRef.current = maxAccum;\r\n        }\r\n        while (accumRef.current >= stepMs) {\r\n            update(stepMs);\r\n            accumRef.current -= stepMs;\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Game } from './Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        Auto Collectors - Work in Progress\r\n      </header>\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href,\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nexport const createKey = (x: number, y: number, yMax: number): number => y + x * yMax;\r\n\r\n/** \r\n * return a copy of the 2d array with the value at (i, j) set to the new value\r\n * NOTE: i is the outer array's index, and j is the inner array. \r\n */\r\nexport const set2dValue = <TValue>(values: TValue[][], i: number, j: number, newValue: TValue): TValue[][] => (\r\n    values.map((row, ii) => ii === i\r\n        ? row.map((value, jj) => jj === j ? newValue : value)\r\n        : row)\r\n);\r\n\r\nexport function parseIntWithDefault(value: string, defaultValue: number): number {\r\n    const n = parseInt(value, 10);\r\n    return isNaN(n) ? defaultValue : n;\r\n}\r\n","import { IGameState, IPosition } from '../State';\r\nimport { set2dValue } from '../util';\r\n\r\nexport function collectReducer(state: IGameState, { x, y }: IPosition): IGameState {\r\n    const oldBlock = state.blocks[y][x];\r\n    if (oldBlock.stuff <= 0) {\r\n        return state;\r\n    }\r\n\r\n    const newBlock = {\r\n        ...oldBlock,\r\n        stuff: oldBlock.stuff - 1,\r\n        reachable: true,\r\n    };\r\n    const isDepleted = newBlock.stuff <= 0;\r\n    return {\r\n        ...state,\r\n        blocks: set2dValue(state.blocks, y, x, newBlock),\r\n        collectibleBlocks: isDepleted\r\n            ? state.collectibleBlocks.filter(b => b.x !== x || b.y !== y)\r\n            : !oldBlock.reachable\r\n                ? [...state.collectibleBlocks, { x, y }]\r\n                : state.collectibleBlocks,\r\n        stuff: state.stuff + 1,\r\n    };\r\n}\r\n","import { IGameState, IPosition } from '../State';\r\nimport { set2dValue } from '../util';\r\n\r\n\r\nfunction searchBlock(state: IGameState, y: number, x: number): IGameState {\r\n    if (y < 0 || y >= state.blocks.length || x < 0 || x >= state.blocks.length) {\r\n        return state;\r\n    }\r\n    const block = state.blocks[y][x];\r\n    if (block.reachable) {\r\n        return state;\r\n    }\r\n    return {\r\n        ...state,\r\n        blocks: set2dValue(state.blocks, y, x, { ...block, reachable: true }),\r\n        collectibleBlocks: [...state.collectibleBlocks, { x, y }],\r\n    };\r\n}\r\n\r\nexport function searchReducer(state: IGameState, { x, y }: IPosition): IGameState {\r\n    const block = state.blocks[y][x];\r\n    if (block.stuff > 0) {\r\n        return state;\r\n    }\r\n    state = searchBlock(state, y + 1, x);\r\n    state = searchBlock(state, y - 1, x);\r\n    state = searchBlock(state, y, x + 1);\r\n    state = searchBlock(state, y, x - 1);\r\n    return state;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { rootReducer } from './game/reducers';\r\nimport { IGameState } from './game/State';\r\nimport { ActionUnion } from './game/Actions';\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    }) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(\r\n    thunkMiddleware,\r\n  ),\r\n  // other store enhancers if any\r\n);\r\n\r\nconst store = createStore<IGameState, ActionUnion, unknown, unknown>(\r\n  rootReducer,\r\n  enhancer,\r\n);\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { ActionUnion, COLLECT, RESET_GAME, SEARCH, SET_GRID_TYPE, SET_SPEED } from '../Actions';\r\nimport { collectReducer } from './collect';\r\nimport { searchReducer } from './search';\r\nimport { createDefaultState, createState, IGameState } from '../State';\r\n\r\nexport function rootReducer(state: IGameState = createDefaultState(), action?: ActionUnion): IGameState {\r\n    if (!action) {\r\n        return state;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case COLLECT:\r\n            return collectReducer(state, action.payload);\r\n        case SEARCH:\r\n            return searchReducer(state, action.payload);\r\n        case RESET_GAME:\r\n            const { size } = action.payload;\r\n            return {\r\n                ...createState(size, size),\r\n                speed: state.speed,\r\n                gridType: state.gridType,\r\n            };\r\n        case SET_SPEED:\r\n            return {\r\n                ...state,\r\n                speed: action.payload,\r\n            };\r\n        case SET_GRID_TYPE:\r\n            return {\r\n                ...state,\r\n                gridType: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}
{"version":3,"sources":["Game.module.scss","game/State.ts","game/Actions.ts","Game.tsx","game/hooks/useStep.ts","App.tsx","serviceWorker.ts","game/util.ts","game/reducers/collect.ts","game/reducers/search.ts","index.tsx","game/reducers/index.ts"],"names":["module","exports","useGameSelector","useSelector","createState","width","height","blocks","range","map","y","x","stuff","reachable","collectibleBlocks","speed","createDefaultState","collect","pos","dispatch","getState","type","payload","collectedBlock","Game","blockRowCount","state","length","className","styles","root","GameLoop","controls","Resetter","defaultGridSize","SpeedSelector","StuffDisplay","grid","BlockRow","key","SuccessDisplay","useDispatch","update","stepMs","lastTimeRef","useRef","accumRef","maxAccum","useMemo","useRafLoop","time","current","delta","useStep","randomBlock","Math","floor","random","useState","resetSize","setResetSize","disabled","setDisabled","onChange","useCallback","value","target","n","parseInt","isNaN","onResetClick","size","min","defaultValue","String","required","pattern","onClick","valueAsNumber","setSpeed","success","rowSize","row","Block","block","blockColor","style","App","Boolean","window","location","hostname","match","set2dValue","values","i","j","newValue","ii","jj","collectReducer","oldBlock","newBlock","isDepleted","filter","b","searchBlock","searchReducer","enhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunkMiddleware","store","createStore","action","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e475a9c3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Game_root__2VenW\",\"controls\":\"Game_controls__2cTjf\",\"grid\":\"Game_grid__zZH6q\",\"row\":\"Game_row__1uA0V\",\"block\":\"Game_block__3C-M9\",\"blockColor\":\"Game_blockColor__2SBPn\",\"reachable\":\"Game_reachable__3vy7J\",\"success\":\"Game_success__2fBGb\"};","import { range } from 'lodash';\r\nimport { TypedUseSelectorHook, useSelector } from 'react-redux';\r\n\r\nexport const useGameSelector: TypedUseSelectorHook<IGameState> = useSelector;\r\n\r\nexport interface IPosition {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface IBlock extends IPosition {\r\n    stuff: number;\r\n    reachable: boolean;\r\n}\r\n\r\nexport type IBlocks = IBlock[][];\r\n\r\nexport interface IGameState {\r\n    /** Access y first, so block at (2,3) is blocks[3][2] */\r\n    blocks: IBlock[][];\r\n    collectibleBlocks: IPosition[];\r\n    stuff: number;\r\n    speed: number;\r\n}\r\n\r\n\r\nexport const createState = (width: number, height: number): IGameState => {\r\n    const blocks = range(height)\r\n        .map(y => range(width)\r\n            .map(x => ({\r\n                x,\r\n                y,\r\n                stuff: 10,\r\n                reachable: y === 0 && x === 0,\r\n            })));\r\n    return {\r\n        blocks,\r\n        collectibleBlocks: [{ x: 0, y: 0 }],\r\n        stuff: 0,\r\n        speed: 1,\r\n    };\r\n};\r\n\r\nconst SIZE = 20;\r\nexport const createDefaultState = () => createState(SIZE, SIZE);\r\n","import { Action } from 'redux';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { IGameState, IPosition } from './State';\r\n\r\n\r\nexport type GameAction<TType = string, TPayload = undefined> = TPayload extends undefined\r\n    ? Action<TType>\r\n    : { type: TType; payload: TPayload; };\r\n\r\nexport const COLLECT = 'COLLECT';\r\nexport type CollectAction = GameAction<typeof COLLECT, IPosition>;\r\n\r\nexport const SEARCH = 'SEARCH';\r\nexport type SearchAction = GameAction<typeof SEARCH, IPosition>;\r\n\r\nexport const RESET_GAME = 'RESET_GAME';\r\nexport type ResetGameAction = GameAction<typeof RESET_GAME, { size: number }>;\r\n\r\nexport const SET_SPEED = 'SET_SPEED';\r\nexport type SetSpeedAction = GameAction<typeof SET_SPEED, number>;\r\n\r\nexport type ActionUnion = (\r\n    | CollectAction\r\n    | SearchAction\r\n    | ResetGameAction\r\n    | SetSpeedAction\r\n);\r\n\r\nexport type GameThunkAction = ThunkAction<unknown, IGameState, unknown, ActionUnion>;\r\n\r\nexport const collect = (pos: IPosition): GameThunkAction => (dispatch, getState) => {\r\n    dispatch({ type: COLLECT, payload: pos });\r\n    const collectedBlock = getState().blocks[pos.y][pos.x];\r\n    if (collectedBlock.stuff === 0) {\r\n        dispatch({ type: SEARCH, payload: collectedBlock });\r\n    }\r\n};\r\n\r\nexport const collectRandom = (): GameThunkAction => (dispatch, getState) => {\r\n    const collectibleBlocks = getState().collectibleBlocks;\r\n    if (collectibleBlocks.length > 0) {\r\n        const randomBlock = collectibleBlocks[Math.floor(Math.random() * collectibleBlocks.length)];\r\n        dispatch(collect(randomBlock));\r\n    }\r\n};\r\n\r\nexport const resetGame = (size: number): ResetGameAction => ({ type: RESET_GAME, payload: { size } });\r\n\r\nexport const setSpeed = (speed: number): SetSpeedAction => ({ type: SET_SPEED, payload: speed });","import React, { useCallback, useMemo, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { range } from 'lodash';\r\nimport styles from './Game.module.scss';\r\nimport { IPosition, useGameSelector } from './game/State';\r\nimport { useStep } from './game/hooks/useStep';\r\nimport { collect, collectRandom, resetGame, setSpeed } from './game/Actions';\r\n\r\n\r\nexport function Game(): JSX.Element {\r\n    const blockRowCount = useGameSelector(state => state.blocks.length);\r\n    return (\r\n        <div className={styles.root}>\r\n            <GameLoop />\r\n            <div className={styles.controls}>\r\n                <Resetter defaultGridSize={blockRowCount} />\r\n                <SpeedSelector />\r\n            </div>\r\n            <StuffDisplay />\r\n            <div className={styles.grid}>\r\n                {range(blockRowCount).map(y => (\r\n                    <BlockRow key={y} y={y} />\r\n                ))}\r\n            </div>\r\n            <SuccessDisplay />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction GameLoop(): null {\r\n    const dispatch = useDispatch();\r\n    const speed = useGameSelector(state => state.speed);\r\n    const stepMs = useMemo(() => 1000 / speed, [speed]);\r\n    useStep(() => dispatch(collectRandom()), stepMs);\r\n    return null;\r\n}\r\n\r\nfunction Resetter({ defaultGridSize }: { defaultGridSize: number }): JSX.Element {\r\n    const dispatch = useDispatch();\r\n    const [resetSize, setResetSize] = useState(defaultGridSize);\r\n    const [disabled, setDisabled] = useState(false);\r\n    const onChange = useCallback(({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\r\n        const n = parseInt(value, 10);\r\n        if (n > 0) {\r\n            setResetSize(n);\r\n        }\r\n        setDisabled(isNaN(n) || n < 1);\r\n    }, []);\r\n    const onResetClick = useCallback(() => !disabled && dispatch(resetGame(resetSize)), [dispatch, disabled, resetSize]);\r\n    return (\r\n        <p>\r\n            <span>Size</span>\r\n            <input type=\"number\" min={1} defaultValue={String(defaultGridSize)} onChange={onChange} required pattern=\"[1-9][0-9]*\" />\r\n            <button disabled={disabled} onClick={onResetClick}>Reset</button>\r\n        </p>\r\n    );\r\n}\r\n\r\nfunction SpeedSelector(): JSX.Element {\r\n    const dispatch = useDispatch();\r\n    const speed = useGameSelector(state => state.speed);\r\n    const onChange = useCallback(({ target: { valueAsNumber } }: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (valueAsNumber > 0) {\r\n            dispatch(setSpeed(valueAsNumber));\r\n        }\r\n    }, [dispatch]);\r\n    return (\r\n        <p>\r\n            <span>Speed</span>\r\n            <input type=\"number\" min={1} defaultValue={String(speed)} onChange={onChange} required pattern=\"[1-9][0-9]*\" />\r\n            <span>&nbsp;ticks/sec</span>\r\n        </p>\r\n    );\r\n}\r\n\r\nfunction StuffDisplay(): JSX.Element {\r\n    const stuff = useGameSelector(state => state.stuff);\r\n    return (\r\n        <p>Collected stuff: <strong>{stuff}</strong></p>\r\n    );\r\n}\r\n\r\nfunction SuccessDisplay(): JSX.Element | null {\r\n    const isDone = useGameSelector(state => state.collectibleBlocks.length === 0);\r\n    if (isDone) {\r\n        return (\r\n            <p className={styles.success}>All stuff collected!</p>\r\n        );\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction BlockRow({ y }: { y: number }): JSX.Element {\r\n    const rowSize = useGameSelector(state => state.blocks[y].length);\r\n    return (\r\n        <div className={styles.row}>\r\n            {range(rowSize).map(x => (\r\n                <Block key={x} x={x} y={y} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction Block({ x, y }: IPosition): JSX.Element {\r\n    const block = useGameSelector(state => state.blocks[y][x]);\r\n    const dispatch = useDispatch();\r\n    const onClick = useCallback(() => block.stuff > 0 && dispatch(collect(block)), [dispatch, block]);\r\n    const size = useMemo(() => Math.floor(block.stuff * 100 / 10) + '%', [block.stuff]);\r\n\r\n    return (\r\n        <div className={`${styles.block} ${block.reachable ? styles.reachable : ''}`} onClick={onClick}>\r\n            <div\r\n                className={styles.blockColor}\r\n                style={{ height: size, width: size }}\r\n            />\r\n        </div>\r\n    );\r\n}","import { useMemo, useRef } from 'react';\r\nimport { useRafLoop } from 'react-use';\r\n\r\n\r\n/** updates as close to every stepMs as possible, while hopefully preventing drift over time. */\r\nexport function useStep(update: (delta: number) => void, stepMs: number = (1 / 30)): void {\r\n    const lastTimeRef = useRef(0);\r\n    const accumRef = useRef(0);\r\n    const maxAccum = useMemo(() => stepMs * 10, [stepMs]);\r\n\r\n    useRafLoop(time => {\r\n        if (lastTimeRef.current === 0) {\r\n            lastTimeRef.current = time;\r\n        }\r\n        const delta = time - lastTimeRef.current;\r\n        lastTimeRef.current = time;\r\n        accumRef.current += delta;\r\n        if (accumRef.current > maxAccum) {\r\n            accumRef.current = maxAccum;\r\n        }\r\n        while (accumRef.current >= stepMs) {\r\n            update(stepMs);\r\n            accumRef.current -= stepMs;\r\n        }\r\n    });\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport { Game } from './Game';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        Auto Collectors - Work in Progress\r\n      </header>\r\n      <Game />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href,\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.',\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","\r\nexport const createKey = (x: number, y: number, yMax: number): number => y + x * yMax;\r\n\r\n/** \r\n * return a copy of the 2d array with the value at (i, j) set to the new value\r\n * NOTE: i is the outer array's index, and j is the inner array. \r\n */\r\nexport const set2dValue = <TValue>(values: TValue[][], i: number, j: number, newValue: TValue): TValue[][] => (\r\n    values.map((row, ii) => ii === i\r\n        ? row.map((value, jj) => jj === j ? newValue : value)\r\n        : row)\r\n);\r\n\r\nexport function parseIntWithDefault(value: string, defaultValue: number): number {\r\n    const n = parseInt(value, 10);\r\n    return isNaN(n) ? defaultValue : n;\r\n}\r\n","import { IGameState, IPosition } from '../State';\r\nimport { set2dValue } from '../util';\r\n\r\nexport function collectReducer(state: IGameState, { x, y }: IPosition): IGameState {\r\n    const oldBlock = state.blocks[y][x];\r\n    if (oldBlock.stuff <= 0) {\r\n        return state;\r\n    }\r\n\r\n    const newBlock = {\r\n        ...oldBlock,\r\n        stuff: oldBlock.stuff - 1,\r\n        reachable: true,\r\n    };\r\n    const isDepleted = newBlock.stuff <= 0;\r\n    return {\r\n        ...state,\r\n        blocks: set2dValue(state.blocks, y, x, newBlock),\r\n        collectibleBlocks: isDepleted\r\n            ? state.collectibleBlocks.filter(b => b.x !== x || b.y !== y)\r\n            : !oldBlock.reachable\r\n                ? [...state.collectibleBlocks, { x, y }]\r\n                : state.collectibleBlocks,\r\n        stuff: state.stuff + 1,\r\n    };\r\n}\r\n","import { IGameState, IPosition } from '../State';\r\nimport { set2dValue } from '../util';\r\n\r\n\r\nfunction searchBlock(state: IGameState, y: number, x: number): IGameState {\r\n    if (y < 0 || y >= state.blocks.length || x < 0 || x >= state.blocks.length) {\r\n        return state;\r\n    }\r\n    const block = state.blocks[y][x];\r\n    if (block.reachable) {\r\n        return state;\r\n    }\r\n    return {\r\n        ...state,\r\n        blocks: set2dValue(state.blocks, y, x, { ...block, reachable: true }),\r\n        collectibleBlocks: [...state.collectibleBlocks, { x, y }],\r\n    };\r\n}\r\n\r\nexport function searchReducer(state: IGameState, { x, y }: IPosition): IGameState {\r\n    const block = state.blocks[y][x];\r\n    if (block.stuff > 0) {\r\n        return state;\r\n    }\r\n    state = searchBlock(state, y + 1, x);\r\n    state = searchBlock(state, y - 1, x);\r\n    state = searchBlock(state, y, x + 1);\r\n    state = searchBlock(state, y, x - 1);\r\n    return state;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { applyMiddleware, compose, createStore } from 'redux';\r\nimport { rootReducer } from './game/reducers';\r\nimport { IGameState } from './game/State';\r\nimport { ActionUnion } from './game/Actions';\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n      // Specify extension’s options like name, actionsBlacklist, actionsCreators, serialize...\r\n    }) : compose;\r\n\r\nconst enhancer = composeEnhancers(\r\n  applyMiddleware(\r\n    thunkMiddleware,\r\n  ),\r\n  // other store enhancers if any\r\n);\r\n\r\nconst store = createStore<IGameState, ActionUnion, unknown, unknown>(\r\n  rootReducer,\r\n  enhancer,\r\n);\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { ActionUnion, COLLECT, RESET_GAME, SEARCH, SET_SPEED } from '../Actions';\r\nimport { collectReducer } from './collect';\r\nimport { searchReducer } from './search';\r\nimport { createDefaultState, createState, IGameState } from '../State';\r\n\r\nexport function rootReducer(state: IGameState = createDefaultState(), action?: ActionUnion): IGameState {\r\n    if (!action) {\r\n        return state;\r\n    }\r\n\r\n    switch (action.type) {\r\n        case COLLECT:\r\n            return collectReducer(state, action.payload);\r\n        case SEARCH:\r\n            return searchReducer(state, action.payload);\r\n        case RESET_GAME:\r\n            const { size } = action.payload;\r\n            return {\r\n                ...createState(size, size),\r\n                speed: state.speed,\r\n            };\r\n        case SET_SPEED:\r\n            return {\r\n                ...state,\r\n                speed: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}